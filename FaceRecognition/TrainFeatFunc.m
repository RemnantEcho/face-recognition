clear all;

%train('surf', 'svm');
train('hog', 'svm');

function [features, featureMetrics] = customHOGExtractor(img)
I = img;
[height, width, numChannels] = size(I);

if numChannels > 1
    grayImage = rgb2gray(I);
else
    grayImage = I;
end

multiscaleHarrisPoints = detectHarrisFeatures(grayImage);
[features, validPoints] = extractHOGFeatures(grayImage, multiscaleHarrisPoints);
%featureMetrics = multiscaleHarrisPoints.Metric;
featureMetrics = validPoints.Metric;
end

function [features, featureMetrics] = customSURFExtractor(img)
I = img;
[height, width, numChannels] = size(I);

if numChannels > 1
    grayImage = rgb2gray(I);
else
    grayImage = I;
end

multiscaleSURFPoints = detectSURFFeatures(grayImage);
features = extractFeatures(grayImage, multiscaleSURFPoints);
featureMetrics = multiscaleSURFPoints.Metric;

end

function train(featureType, classifierType)
rootFolder = fullfile('cropface');

% Load files to imageset with manual labels
imgSets = [imageSet(fullfile(rootFolder, '01')),...
    imageSet(fullfile(rootFolder, '02')),...
    imageSet(fullfile(rootFolder, '03')),...
    imageSet(fullfile(rootFolder, '04')),...
    imageSet(fullfile(rootFolder, '05')),...
    imageSet(fullfile(rootFolder, '06')),...
    imageSet(fullfile(rootFolder, '07')),...
    imageSet(fullfile(rootFolder, '08')),...
    imageSet(fullfile(rootFolder, '09')),...
    imageSet(fullfile(rootFolder, '10')),...
    imageSet(fullfile(rootFolder, '11')),...
    imageSet(fullfile(rootFolder, '12')),...
    imageSet(fullfile(rootFolder, '13')),...
    imageSet(fullfile(rootFolder, '14')),...
    imageSet(fullfile(rootFolder, '15')),...
    imageSet(fullfile(rootFolder, '16')),...
    imageSet(fullfile(rootFolder, '17')),...
    imageSet(fullfile(rootFolder, '18')),...
    imageSet(fullfile(rootFolder, '19')),...
    imageSet(fullfile(rootFolder, '20')),...
    imageSet(fullfile(rootFolder, '21')),...
    imageSet(fullfile(rootFolder, '22')),...
    imageSet(fullfile(rootFolder, '23')),...
    imageSet(fullfile(rootFolder, '24')),...
    imageSet(fullfile(rootFolder, '25')),...
    imageSet(fullfile(rootFolder, '26')),...
    imageSet(fullfile(rootFolder, '27')),...
    imageSet(fullfile(rootFolder, '28')),...
    imageSet(fullfile(rootFolder, '29')),...
    imageSet(fullfile(rootFolder, '30')),...
    imageSet(fullfile(rootFolder, '31')),...
    imageSet(fullfile(rootFolder, '32')),...
    imageSet(fullfile(rootFolder, '33')),...
    imageSet(fullfile(rootFolder, '34')),...
    imageSet(fullfile(rootFolder, '36')),...
    imageSet(fullfile(rootFolder, '38')),...
    imageSet(fullfile(rootFolder, '40')),...
    imageSet(fullfile(rootFolder, '42')),...
    imageSet(fullfile(rootFolder, '44')),...
    imageSet(fullfile(rootFolder, '46')),...
    imageSet(fullfile(rootFolder, '48')),...
    imageSet(fullfile(rootFolder, '50')),...
    imageSet(fullfile(rootFolder, '52')),...
    imageSet(fullfile(rootFolder, '54')),...
    imageSet(fullfile(rootFolder, '56')),...
    imageSet(fullfile(rootFolder, '58')),...
    imageSet(fullfile(rootFolder, '60')),...
    imageSet(fullfile(rootFolder, '78'))];

    minSetCount = min([imgSets.Count]);
    imgSets = partition(imgSets, minSetCount, 'randomize');

    % Split training and validation data
    [trainingSets, validationSets] = partition(imgSets, 0.4, 'randomize');

    if classifierType == "svm"
        if featureType == "surf"
            % Detect SURF
            %pImg = detectSURFFeatures(img);
            %pDSImg = detectSURFFeatures(dsimg);
            %[featuresOG, validPtsOG] = extractFeatures(img, pImg);
            %[featuresDS, validPtsDS] = extractFeatures(dsImg, pDSImg);
            % indexPairs = matchFeatures(featuresOG, featuresDS);
            % matchedOriginal = validPtsOG(indexPairs(:,1));
            % matchedDataset = validPtsDS(indexPairs(:,2));
            
            % Bag of Features with Custom SURF extractor
            extractor = @customSURFExtractor;
            
        elseif featureType == "hog"
            % Bag of Features with Custom Harris extractor
            extractor = @customHOGExtractor;
        end
        
        % Use custom Extractor
        bag = bagOfFeatures(trainingSets,'CustomExtractor',extractor);
        
        % Train SVM
        categoryClassifier = trainImageCategoryClassifier(trainingSets, bag);
        
        
        if featureType == "surf"
            save surfSVMTrain;
        end
        
        if featureType == "hog"
            save hogSVMTrain;
        end
        
        
        
        % Create Confusion Matrix
        % Train sets
        confMatrixTrain = evaluate(categoryClassifier, trainingSets);
        disp(confMatrixTrain);
        
        % Validation sets
        confMatrixValid = evaluate(categoryClassifier, validationSets);
        meanValid = mean(diag(confMatrixValid));
        disp(meanValid);
        
    else
        disp('No Feature/Classifier Type by that name');

    end
end

